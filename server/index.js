const { Socket } = require("dgram");
const express =require("express");
const http = require("http");
const mongoose = require("mongoose");
const Room = require("./models/room");
const app=express();
const port =process.env.PORT||3000;
var server = http.createServer(app);
var io= require("socket.io")(server);
//middleware
app.use(express.json);
const DB = "mongodb+srv://ayush:test123@cluster0.ltcynrd.mongodb.net/?retryWrites=true&w=majority";
io.on('connection',(socket)=>{
    console.log("Connected!");
    socket.on('createRoom',async ({nickname})=>{
        console.log(nickname);
        try{
            // room is created
            let room =new Room();
            let player = {
                socketID: socket.id,
                nickname,
                playerType: 'X',
            };
            room.players.push(player);
            room.turn=player;
            room = await room.save();
            console.log(room);
            const roomId=room._id.toString(); //_id ia autogenerated by mongodb
            socket.join(roomId);
            // player is stored in the room
            //tell our client that room has been created 
            //go to the next page
            //io- sends data to everyone
            // socket- send data to yourself
            io.to(roomId).emit('createRoomSuccess',room);
        }catch(e){
            console.log(e);
        }
        
    });
    socket.on('joinRoom',async ({nickname,roomId})=>{
        try{
            if(!roomId.match(/^[0-9a-fA-F]{24}$/)){
                socket.emit('errorOccurred','Please enter a valid room ID.');
                return;
            }
            let room=await Room.findById(roomId);
            if(room.isJoin){
                let player={
                    nickname,
                    socketID: socket.id,
                    playerType:'O',
                }
                socket.join(roomId);
                room.players.push(player);
                room.isJoin=false;
                room= await room.save();
                io.to(roomId).emit('joinRoomSuccess',room);
                io.to(roomId).emit('updatePlayers',room.players);
                io.to(roomId).emit('updateRoom',room);
            }else{
                socket.emit('errorOccurred','The game is in progress, try again later.');
            }
        }catch(e){
            console.log(e);
        }
    });
    socket.on('tap',async ({index,roomId})=>{
        try{
            let room = await Room.findById(roomId);

            let choice = room.turn.playerType;//x or o
            if(room.turnIndex==0){
                room.turn = room.players[1];
                room.turnIndex=1;
            }else{
                room.turn = room.players[0];
                room.turnIndex=0;
            }
            room = await room.save();
            io.to(roomId).emit('tapped',{
                index,
                choice,
                room,
            })
        } catch (e){
            console.log(e);
        }
    })
    socket.on('winner',async ({winnerSocketId,roomId})=>{
        try {
            let room =await Room.findById(roomId);
            let player = room.players.find((playerr)=>playerr.socketID==winnerSocketId);
            player.points+=1;
            room=await room.save();
            if(player.points>=room.maxRound){
                io.to(roomId).emit('endGame',player);
            }else{
                io.to(roomId).emit('pointIncrease',player);
            }
        } catch (e) {
            console.log(e);
        }
    });
});
mongoose.connect(DB).then(()=>{
    console.log('Connection Successful');
}).catch((e)=>{
    console.log(e);
});
//promises in js is equivalent to future in dart
server.listen(port,'0.0.0.0',()=>{
    console.log(`Server Started and running on port ${port}`);
});